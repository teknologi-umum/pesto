name: Master

on:
  push:
    branches:
      - master

jobs:
  auth:
    name: Auth
    runs-on: ubuntu-latest
    container: golang:1.18
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./auth
    services:
      db:
        image: gcr.io/etcd-development/etcd:v3.5.4
        env:
          ETCD_NAME: s1
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_ADVERTISE_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
          ETCD_INITIAL_ADVERTISE_PEER_URLS: http://0.0.0.0:2380
          ETCD_INITIAL_CLUSTER: s1=http://0.0.0.0:2380
          ETCD_INITIAL_CLUSTER_TOKEN: 2d8edff944592668ef483cac8ff45f195cfc5f0463e32027e0d59bc8bb020df7
          ETCD_INITIAL_CLUSTER_STATE: new
        ports:
          - 2379:2379
          - 2380:2380
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Secrets scan
        run: >
          apt update && apt install -y curl tar gzip &&
          curl -LO https://github.com/trufflesecurity/trufflehog/releases/download/v3.6.7/trufflehog_3.6.7_linux_amd64.tar.gz &&
          tar -zxf trufflehog_3.6.7_linux_amd64.tar.gz &&
          mv -v trufflehog /usr/bin/trufflehog &&
          rm -rf README.md LICENSE trufflehog_3.6.7_linux_amd64.tar.gz &&
          trufflehog git --concurrency=$(nproc) --no-update --since-commit=$(echo $BASE_COMMIT) file://./
        continue-on-error: true
        env:
          BASE_COMMIT: ${{ github.sha }}
      - name: Build test
        run: go build .
      - name: Run test
        run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
        env:
          ENVIRONMENT: github-actions
          SENTRY_DSN: ""
          ETCD_URL: db:2379

  rce:
    name: RCE
    runs-on: ubuntu-latest
    container: node:16.14.0-bullseye
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./rce
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Secrets scan
        run: >
          apt update && apt install -y curl tar gzip &&
          curl -LO https://github.com/trufflesecurity/trufflehog/releases/download/v3.6.7/trufflehog_3.6.7_linux_amd64.tar.gz &&
          tar -zxf trufflehog_3.6.7_linux_amd64.tar.gz &&
          mv -v trufflehog /usr/bin/trufflehog &&
          rm -rf README.md LICENSE trufflehog_3.6.7_linux_amd64.tar.gz &&
          trufflehog git --concurrency=$(nproc) --no-update --since-commit=$(echo $BASE_COMMIT) file://./
        continue-on-error: true
        env:
          BASE_COMMIT: ${{ github.sha }}
      - name: Setup packages && nosocket
        run: >
          apt-get update &&
          apt-get install -y coreutils binutils build-essential libseccomp-dev gcc apt-utils &&
          make -C ./nosocket/ all && make -C ./nosocket/ install
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npx eslint --ext .ts,.js,.cjs .
      - name: Build
        run: npm run build
      - name: Test & coverage
        run: npm run test

  landing:
    name: Landing
    runs-on: ubuntu-latest
    container: node:18.6.0-alpine3.16
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./landing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Secrets scan
        run: >
          apt update && apt install -y curl tar gzip &&
          curl -LO https://github.com/trufflesecurity/trufflehog/releases/download/v3.6.7/trufflehog_3.6.7_linux_amd64.tar.gz &&
          tar -zxf trufflehog_3.6.7_linux_amd64.tar.gz &&
          mv -v trufflehog /usr/bin/trufflehog &&
          rm -rf README.md LICENSE trufflehog_3.6.7_linux_amd64.tar.gz &&
          trufflehog git --concurrency=$(nproc) --no-update --since-commit=$(echo $BASE_COMMIT) file://./
        continue-on-error: true
        env:
          BASE_COMMIT: ${{ github.sha }}
      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Check formatting
        run: pnpm fmt:check
      - name: Build
        run: pnpm build

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    container: debian:bullseye
    timeout-minutes: 15
    needs:
      - auth
      - rce
      - landing
    steps:
      - name: Install required packages
        run: apt-get update && apt-get upgrade -y && apt-get install -y tar gzip curl ssh

      - name: Register SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SSH_IP }}
          if_key_exists: replace

      - name: SSH Keyscan
        run: ssh-keyscan -H ${{ secrets.SSH_IP }} >> /root/.ssh/known_hosts

      - name: Pull latest code
        run: ssh -i /root/.ssh/id_ed25519 -p ${{ secrets.SSH_PORT }} -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} 'cd ~/pesto && git pull'

      - name: Build Docker images
        run: ssh -i /root/.ssh/id_ed25519 -p ${{ secrets.SSH_PORT }} -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} 'echo ${{ secrets.SSH_PASSWORD }} | sudo -S sh -c "cd ~/pesto && docker compose up -d --build registration rce landing auth"'

      - name: Prune build artifacts
        run: ssh -i /root/.ssh/id_ed25519 -p ${{ secrets.SSH_PORT }} -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} 'echo ${{ secrets.SSH_PASSWORD }} | sudo -S sh -c "docker container prune -f && docker image prune -f && docker builder prune -f"'
