name: Master / Main Systems

on:
  push:
    branches:
      - master

jobs:
  auth:
    name: Auth
    runs-on: ubuntu-latest
    container: golang:1.19
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./auth
    services:
      db:
        image: redis:7-bullseye
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Build test
        run: go build .

      - name: Run test
        run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
        env:
          ENVIRONMENT: github-actions
          SENTRY_DSN: ""
          REDIS_URL: redis://@db:6379

      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: auth

  rce:
    name: RCE
    runs-on: ubuntu-latest
    container: node:16.14.0-bullseye
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./rce
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Setup packages && nosocket
        run: >
          apt-get update &&
          apt-get install -y coreutils binutils build-essential libseccomp-dev gcc apt-utils &&
          make -C ./nosocket/ all && make -C ./nosocket/ install

      - name: Install other language packages
        run: >
          apt-get install -y python3 sqlite3 lua5.4

      - name: Setup directory
        run: mkdir -p /code/$(whoami)

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npx eslint --ext .ts,.js,.cjs .

      - name: Build
        run: npm run build

      - name: Test & coverage
        run: npm run test
        env:
          LANGUAGE_JAVASCRIPT: true
          LANGUAGE_C: true
          LANGUAGE_LUA: true
          LANGUAGE_PYTHON: true
          LANGUAGE_SQLITE: true

      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: rce

  landing:
    name: Landing
    runs-on: ubuntu-latest
    container: node:18.6.0
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./landing
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Check formatting
        run: pnpm fmt:check

      - name: Build
        run: pnpm build

  registration:
    name: Registration
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:6.0
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./registration
    services:
      db:
        image: redis:7-bullseye
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Restore
        run: dotnet restore "Registration.csproj"

      - name: Build
        run: dotnet build "Registration.csproj" --no-restore -c Release

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    container: debian:bullseye
    timeout-minutes: 120
    needs:
      - auth
      - rce
      - landing
      - registration
    steps:
      - name: Install required packages
        run: apt-get update && apt-get upgrade -y && apt-get install -y tar gzip curl ssh

      - name: Register SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SSH_IP }}
          if_key_exists: replace

      - name: SSH Keyscan
        run: ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_IP }} >> /root/.ssh/known_hosts

      - name: Pull latest code
        run: >
          ssh
          -i /root/.ssh/id_ed25519 
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} 
          'ssh pesto "cd ${{ secrets.SSH_WORKDIR }}/pesto && git pull" '

      - name: Build Docker images
        run: >
          ssh 
          -i /root/.ssh/id_ed25519
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }}
          "ssh pesto 'echo ${{ secrets.SSH_PASSWORD }} | sudo -S bash -c '\"'cd ${{ secrets.SSH_WORKDIR }}/pesto &&
          docker compose up -d --build registration rce landing auth '\"' ' "

      - name: Clean up docker artifacts
        run: >
          ssh 
          -i /root/.ssh/id_ed25519
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }}
          "ssh pesto 'echo ${{ secrets.SSH_PASSWORD }} | sudo -S bash -c '\"'docker container prune -f &&
          docker image prune -f &&
          docker builder prune -f '\"' ' "
